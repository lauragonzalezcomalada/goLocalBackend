# Generated by Django 4.2.23 on 2025-10-16 20:03

from django.db import migrations

def forwards(apps, schema_editor):
    Promo = apps.get_model('api', 'Promo')
    PrivatePlan = apps.get_model('api', 'PrivatePlan')
    UserProfile = apps.get_model('api', 'UserProfile')

    # Promo
    for p in Promo.objects.all().only('id', 'creador_user_id'):
        uid = p.creador_user_id
        if not uid:
            continue
        up = UserProfile.objects.filter(user_id=uid).only('id').first()
        if not up:
            up = UserProfile.objects.create(user_id=uid)
        Promo.objects.filter(pk=p.pk).update(creador_profile_id=up.id)

    # PrivatePlan
    for pl in PrivatePlan.objects.all().only('id', 'creador_user_id'):
        uid = pl.creador_user_id
        if not uid:
            continue
        up = UserProfile.objects.filter(user_id=uid).only('id').first()
        if not up:
            up = UserProfile.objects.create(user_id=uid)
        PrivatePlan.objects.filter(pk=pl.pk).update(creador_profile_id=up.id)

def backwards(apps, schema_editor):
    Promo = apps.get_model('api', 'Promo')
    PrivatePlan = apps.get_model('api', 'PrivatePlan')
    UserProfile = apps.get_model('api', 'UserProfile')

    for p in Promo.objects.all().only('id', 'creador_profile_id'):
        up_id = p.creador_profile_id
        if not up_id:
            continue
        up = UserProfile.objects.filter(id=up_id).only('user_id').first()
        if up and up.user_id:
            Promo.objects.filter(pk=p.pk).update(creador_user_id=up.user_id)

    for pl in PrivatePlan.objects.all().only('id', 'creador_profile_id'):
        up_id = pl.creador_profile_id
        if not up_id:
            continue
        up = UserProfile.objects.filter(id=up_id).only('user_id').first()
        if up and up.user_id:
            PrivatePlan.objects.filter(pk=pl.pk).update(creador_user_id=up.user_id)



class Migration(migrations.Migration):

    dependencies = [
        ('api', '0024_add_creador_profile_to_promo_and_privateplan'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
